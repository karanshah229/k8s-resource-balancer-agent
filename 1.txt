I am building a course on AI Agent Building for developers.
We have several concepts in it and at the end we have a real world challenge.
This challenge should be close to a real world agent that developers would build and use in their day to day work.

I am thinking of this problem statement for this challenge:

Build a Kubernetes Resource Rebalance Agent with the following capabilities:
1. Detects problematic pods.
2. Decides whether to rebalance automatically or escalate.
3. Acts directly on the cluster via K8s MCP.
4. Notifies the team via Slack MCP with a structured summary of what happened.

Tell me what do you think of this problem statement.

---

Project rules:

Use langchain instead of openai directly
Use FastMCP to create the mcp server and mcp-use library to create the mcp client
Prompts will be in a separate folder and in separate text files
Use as few libraries as possible.
Define the different modules of the application in different packages in separate folders
All tools will return mock data based on the test scenario.
We will have to create test cases also validate the developers code, but we will do
that later.
First come up with the high level logic of the project along with the directory structure, requirements, etc.

---

Updated Project rules:
1. Don't use any build tools, use pip for installing packages and use requirements.text. Everything will be directly run using python3.
2. Don't include type safety at all
3. Use langchain instead of openai directly
4. Use FastMCP to create the mcp server and mcp-use library to create the mcp client
5. Prompts will be in a separate folder and in separate text files
6. Use as few libraries as possible.
7. Define the different modules of the application in different packages in separate folders
8. All tools will return mock data based on the test scenario.
9. We will have to create test cases also validate the developers code, but we will do 
that later.

Test scenarios:

1. OOMKilled â‰¥ 3 in last 24h OR avg memory > 90% limit
2. avg CPU & memory < 20% over 24h

Create the project

---

1. The tools should return exactly in the same format as k8s commands. The data will be mock data but the format should be legit.
2. Increase the amount of test data so that it feels like an actual production app with different kids of pods having realistic k8s metrics
3. Create a demo file that runs different scenarios.

---

How the agent should run

1. Fetch all pod metrics using k8s MCP which will return mock data as per test case.
2. Analyse the data to figure out the pattern and the issue.
3. Then fix the issue if the agent thinks it can fix it by calling the k8s MCP server to perform the operation on pods and post a success message via Slack MCP server
4. If the issue cannot be fixed then post a 

---

1. There should be no need for the agent folder imo. All the agent related work should happen in 1 file in main.py
2. Let's create test cases using pytest. Test cases:
  a. Pod getting killed in last 24h or average memory usage is creater than 80% limit. The agent should first fetch 
  b. 
4. Create test case data according to the test case scenarios above. Ensure the data is real world and spans across few hours.
